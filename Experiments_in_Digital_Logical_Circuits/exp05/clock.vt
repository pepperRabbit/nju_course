// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "10/05/2020 17:21:49"
                                                                                
// Verilog Test Bench template for design : clock
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module clock_vlg_tst();
// constants                                           
// general purpose registers
//reg eachvec;
// test vector input registers
reg CLOCK_50;
reg SW0;
reg SW1;
reg SW2;
// wires                                               
wire [6:0]  HEX0;
wire [6:0]  HEX1;
wire LEDR;

// assign statements (if any)                          
clock i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK_50(CLOCK_50),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.LEDR(LEDR),
	.SW0(SW0),
	.SW1(SW1),
	.SW2(SW2)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin  
//SW0=0;SW1=0;SW2=0;CLOCK_50=0;#20;                        
SW0=1;SW1=0;SW2=0;CLOCK_50=0;#20;                                                       
// --> end                                             
$display("Running testbench");  
//$stop;                     
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
#1 CLOCK_50=~CLOCK_50;                                                       
//@eachvec;                                              
// --> end                                             
end                                                    
endmodule

