// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "09/20/2020 17:17:30"
                                                                                
// Verilog Test Bench template for design : alu
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module alu_vlg_tst();
// constants                                           
// general purpose registers
//reg eachvec;
// test vector input registers
reg [3:0] a;
reg [3:0] b;
reg [2:0] select;
// wires                                               
wire carry;
wire [6:0]  hex0;
wire [6:0]  hex1;
wire [6:0]  hex2;
wire [6:0]  hex3;
wire [6:0]  hex4;
wire [6:0]  hex5;
wire negative;
wire overflow;
wire [3:0]  res;
wire zero;

// assign statements (if any)                          
alu i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.carry(carry),
	.hex0(hex0),
	.hex1(hex1),
	.hex2(hex2),
	.hex3(hex3),
	.hex4(hex4),
	.hex5(hex5),
	.negative(negative),
	.overflow(overflow),
	.res(res),
	.select(select),
	.zero(zero)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin  
//add
select=3'b000; a=4'b1111; b=4'b0001; #20;
					a=4'b0111; b=4'b0111; #20;
					a=4'b1111; b=4'b1110; #20;
					a=4'b1000; b=4'b1001; #20;
//minus
select=3'b001; a=4'b1111; b=4'b0001; #20;
					a=4'b0001; b=4'b1111; #20;
					a=4'b1110; b=4'b1110; #20;
					a=4'b1000; b=4'b0101; #20; 
//not	
select=3'b010; a=4'b0000; #20;
					a=4'b1111; #20;
					a=4'b0101; #20;
//and
select=3'b011; a=4'b0000; b=4'b0000; #20;
					a=4'b0111; b=4'b0101; #20;
					a=4'b0101; b=4'b1010; #20;
//or
select=3'b100; a=4'b0000; b=4'b0000; #20;
					a=4'b0000; b=4'b1111; #20;
//xor
select=3'b101; a=4'b1111; b=4'b0000; #20;
					a=4'b0000; b=4'b0000; #20;
//>
select=3'b110; a=4'b0000; b=4'b1111; #20;
					a=4'b1111; b=4'b1110; #20;
					a=4'b0000; b=4'b0000; #20;
					a=4'b0000; b=4'b0111; #20;
//=
select=3'b111; a=4'b0000; b=4'b1111; #20;
					a=4'b0000; b=4'b0000; #20;

                                                       
// --> end                                             
$display("Running testbench");                       
end                                                    
//always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
//begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin

                                                       
//@eachvec;                                              
// --> end                                             
//end                                                    
endmodule

