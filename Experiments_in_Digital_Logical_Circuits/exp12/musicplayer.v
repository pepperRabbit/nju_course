
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module musicplayer(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// Seg7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// Audio //////////
	input 		          		AUD_ADCDAT,
	inout 		          		AUD_ADCLRCK,
	inout 		          		AUD_BCLK,
	output		          		AUD_DACDAT,
	inout 		          		AUD_DACLRCK,
	output		          		AUD_XCK,

	//////////// PS2 //////////
	inout 		          		PS2_CLK,
	inout 		          		PS2_CLK2,
	inout 		          		PS2_DAT,
	inout 		          		PS2_DAT2,

	//////////// I2C for Audio and Video-In //////////
	output		          		FPGA_I2C_SCLK,
	inout 		          		FPGA_I2C_SDAT
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

//ps2 keyboard===========================================
wire [7:0] data;
wire ready;
wire nextdata_n;
wire overflow;
//=======================================================

//signal=================================================
wire start;//暂停0 or 开始1-------------------------回车
wire [1:0] mode;//三种模式：单曲0，循环1，随机2-------左边键盘数字1 2 3
wire next;	//切歌，高电平有效-------------------------waived
wire restart;	//重新播放，高电平有效-------------------waived
wire record_mode;//录音：非录音模式0，录音模式1-------[：播放  ]：录音
wire recording;//录音1，播放录音0--------------------；录音  ‘ 播放录音
wire record_start;//开始录音1，停止录音0-------------空格
wire record_flag;//当前按键信号是否写入录音reg
wire [5:0] sound;	//音量-----------------------------方向上下键
wire [3:0] note;	//音符序号---------------------------Q~U低音区，A~J中音区
assign LEDR[9]=record_mode;
assign LEDR[0]=start;
assign HEX3=7'b1000000;
assign HEX4=7'b1111111;
assign HEX5=7'b1111111;

//=======================================================

//play===================================================
wire [6:0] seven1;
wire [6:0] seven2;
wire [3:0] play_note;
//=======================================================

//record_module==========================================
wire [6:0] r_seven1;
wire [6:0] r_seven2;
wire [3:0] record_note;
//=======================================================

//audio_module===========================================
wire clk_i2c;
wire audio_reset;
wire [15:0] audiodata;
wire [15:0] wavedata;
wire [9:0] led;
wire K;
assign audio_reset = ~K;
//=======================================================

//=======================================================
//  Structural coding
//=======================================================
ps2_keyboard PS2KEYBOARD(
	.clk(CLOCK_50),
	.clrn(1'b1),
	.ps2_clk(PS2_CLK),
	.ps2_data(PS2_DAT),
	.data(data),
	.ready(ready),
	.nextdata_n(nextdata_n),
	.overflow(overflow)
);

change_next CHANGE_NEXT(
	.ready(ready),
	.nextdata_n(nextdata_n)
);

signal SIGNAL(
	.clk(CLOCK_50),
	.data(data),
	.ready(ready),
	.start(start),
	.mode(mode),
	.next(next),
	.restart(restart),
	.record_mode(record_mode),
	.recording(recording),
	.record_start(record_start),
	.record_flag(record_flag),
	.sound(sound),
	.note(note),
	.out_dis1(HEX2)	//play mode
);

play PLAY(
	.CLOCK_50(CLOCK_50),
	.mode(record_mode),
	.button1(~KEY[0]),	//切歌
	.button2(~KEY[1]),
	.button3(~KEY[2]),
	.select(mode),
	.start(start),
	.restart(~KEY[3]),	//重播
	.out_dis0(seven1),	//time
	.out_dis1(seven2),
	.F(play_note)
);

record_module RECORD(
	.CLOCK_50(CLOCK_50),
	.mode(record_mode),	//record mode
	.recording(recording),	//是否能够录音
	.flag(record_flag),	//判断当前数值是否有效
	.note(note),	//键盘输入音符编码
	.start(start),
	.record_start(record_start),
	.record_note(record_note),//录音音符编码 
	.out_dis0(r_seven1),	//time
	.out_dis1(r_seven2)
);

note_to_d NOTE_TO_D(
	.CLOCK_50(CLOCK_50),
	.mode(record_mode),
	.play_note(play_note),
	.record_note(record_note),
	.play_seven({seven2, seven1}),
	.record_seven({r_seven2, r_seven1}),
	.wavedata(wavedata),
	.seven_high(HEX1),	//time
	.seven_low(HEX0),
	.K(K)
	);
	
audio_clk u1(CLOCK_50, audio_reset,AUD_XCK, led[9]);
clkgen #(10000) my_i2c_clk(CLOCK_50,audio_reset,1'b1,clk_i2c);
I2C_Audio_Config myconfig(clk_i2c, KEY,FPGA_I2C_SCLK,FPGA_I2C_SDAT,led[2:0]);
I2S_Audio myaudio(AUD_XCK, K, AUD_BCLK, AUD_DACDAT, AUD_DACLRCK, audiodata);
Sin_Generator sin_wave(AUD_DACLRCK, K, wavedata, sound, audiodata);

endmodule
