// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "10/23/2020 10:55:56"
                                                                                
// Verilog Test Bench template for design : ram
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module ram_vlg_tst();
// constants                                           
// general purpose registers
//reg eachvec;
// test vector input registers
reg clk;
reg [7:0] indata;
reg [3:0] inaddr;
reg [3:0] inaddr1;
reg we;
// wires
wire [6:0]  hex0;                                               
wire [6:0]  hex1;
wire [7:0]  outdata2;

// assign statements (if any)                          
ram i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.indata(indata),
	.hex0(hex0),
	.hex1(hex1),
	.outdata2(outdata2),
	.inaddr(inaddr),
	.inaddr1(inaddr1),
	.we(we)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
clk=0;we=0;indata=8'b00000000;inaddr=4'b0000;#8;
									inaddr=4'b0001;#8;
									inaddr=4'b0010;#8;
									inaddr=4'b0011;#8;
									inaddr=4'b0100;#8;
									inaddr=4'b0101;#8;
									inaddr=4'b0110;#8;
									inaddr=4'b0111;#8;
									inaddr=4'b1000;#8;
									inaddr=4'b1001;#8;
									inaddr=4'b1010;#8;
									inaddr=4'b1011;#8;
									inaddr=4'b1100;#8;
									inaddr=4'b1101;#8;
									inaddr=4'b1110;#8;
									inaddr=4'b1111;#8;
									inaddr1=4'b0001;#8;
		we=1;indata=2'b11;inaddr=4'b0000;#8;
									inaddr1=4'b0001;#8;
		we=0;indata=8'b00000011;inaddr=4'b0000;#8;
									inaddr1=4'b0001;#8;
		
									/*inoutaddr=4'b0010;#8;
									inoutaddr=4'b0011;#8;
									inoutaddr=4'b0100;#8;
									inoutaddr=4'b0101;#8;
									inoutaddr=4'b0110;#8;
									inoutaddr=4'b0111;#8;
									inoutaddr=4'b1000;#8;
									inoutaddr=4'b1001;#8;
									inoutaddr=4'b1010;#8;
									inoutaddr=4'b1011;#8;
									inoutaddr=4'b1100;#8;
									inoutaddr=4'b1101;#8;
									inoutaddr=4'b1110;#8;
									inoutaddr=4'b1111;#8;
									
		we=0;din=8'b00000000;inoutaddr=4'b0000;#8;
									inoutaddr=4'b0001;#8;
									inoutaddr=4'b0010;#8;
									inoutaddr=4'b0011;#8;
									inoutaddr=4'b0100;#8;
									inoutaddr=4'b0101;#8;
									inoutaddr=4'b0110;#8;
									inoutaddr=4'b0111;#8;
									inoutaddr=4'b1000;#8;
									inoutaddr=4'b1001;#8;
									inoutaddr=4'b1010;#8;
									inoutaddr=4'b1011;#8;
									inoutaddr=4'b1100;#8;
									inoutaddr=4'b1101;#8;
									inoutaddr=4'b1110;#8;
									inoutaddr=4'b1111;#8;*/
									
                                                      
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
#4 clk=~clk;                                                       
//@eachvec;                                              
// --> end                                             
end                                                    
endmodule

